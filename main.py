import telebot, deeptranslate as tran, database

token = input('insert token: ')
print('starting...')

bot = telebot.TeleBot(token)

print('the bot has started!')

def create_language_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(
        telebot.types.InlineKeyboardButton("üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="set_language_en"),
        telebot.types.InlineKeyboardButton("üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π", callback_data="set_language_es")
    )
    return keyboard


@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.from_user.id,
                     "–ü—Ä–∏–≤–µ—Ç! üëã –Ø - TranBot. –Ø —Å–ø–æ—Å–æ–±–µ–Ω –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏–ª–∏ –∏—Å–ø–∞–Ω—Å–∫–∏–π –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ (en –∏–ª–∏ es), –Ω–∞–ø—Ä–∏–º–µ—Ä: \"en: –ü—Ä–∏–≤–µ—Ç\" –∏–ª–∏ \"es: Hola\".",
                     reply_markup = create_language_keyboard())
    database.add_new_user(message.from_user.id, message.from_user.username)



@bot.callback_query_handler(func=lambda call: call.data.startswith("set_language_"))
def handle_language_selection(call):
    user_id = call.from_user.id
    selected_language = call.data.split("_")[-1]  # –ü–æ–ª—É—á–∞–µ–º "en" –∏–ª–∏ "es"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    database.set_user_language(user_id, selected_language)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.answer_callback_query(call.id, f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {'–ê–Ω–≥–ª–∏–π—Å–∫–∏–π' if selected_language == 'en' else '–ò—Å–ø–∞–Ω—Å–∫–∏–π'}")
    bot.send_message(user_id, f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫: {'üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π' if selected_language == 'en' else 'üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π'}")


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    user_id = message.from_user.id
    text_to_translate = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    target_language = database.get_user_language(user_id)[0]
    print(f'the language of user {user_id} is {target_language}')

    bot.send_message(user_id, '–ó–∞–≥—Ä—É–∑–∫–∞... ‚è≥')

    try:
        # –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        if target_language == 'en':
            translated_text = tran.translateEn(text_to_translate)
        elif target_language == 'es':
            translated_text = tran.translateEs(text_to_translate)
        else:
            bot.send_message(user_id,
                             '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —è–∑—ã–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "en:" –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏ "es:" –¥–ª—è –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ.')
            return

        bot.edit_message_text(translated_text, message.from_user.id, message.id + 1)
        print(f'Ru{target_language.upper()} - {text_to_translate} -- {translated_text}')

    except Exception as e:
        bot.send_message(user_id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}')
        print(f'Error translating text: {str(e)}')


bot.infinity_polling(none_stop=True, interval=0)
